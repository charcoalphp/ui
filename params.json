{
  "name": "Charcoal-ui",
  "tagline": "Ui tools (Dashboard, Layout, Form and Menu)",
  "body": "Charcoal UI\r\n===========\r\n\r\nThe `Charcoal\\Ui` module provides tools to create UI elements (dashboards, layouts, forms and menus) from simple metadata / config.\r\n\r\n# Table of contents\r\n\r\n- [How to install](#how-to-install)\r\n\t- [Dependencies](#dependencies)\r\n- [Base UI Item](#base-ui-item)\r\n- [Dashboard](#dashboard)\r\n- [Layout](#layout)\r\n- [Form](#form)\r\n- [Form Group](#form-group)\r\n- [Form Input](#form-input)\r\n- [Menu](#menu)\r\n- [Menu Item](#menu-item)\r\n- [Service Providers](#service-provider)\r\n- [Development](#development)\r\n  - [Development dependencies](#development-dependencies)\r\n  - [Coding Style](#coding-style)\r\n  - [Authors](#authors)\r\n  - [Changelog](#changelog)\r\n\r\n# How to install\r\n\r\nThe preferred (and only supported) way of installing charcoal-view is with **composer**:\r\n\r\n```shell\r\n$ composer require locomotivemtl/charcoal-view\r\n```\r\n\r\n## Dependencies\r\n\r\n- `PHP 5.5+`\r\n\t+ Older versions of PHP are deprecated, therefore not supported.\r\n- [`psr/log`](http://www.php-fig.org/psr/psr-3/)\r\n\t+ A PSR-3 compliant logger should be provided to the various services / classes.\r\n- [`locomotivemtl/charcoal-config`](https://github.com/locomotivemtl/charcoal-config) 0.5+\r\n\t+ The UI objects are _configurable_ with `\\Charcoal\\View\\ViewConfig`.\r\n- [`locomotivemtl/charcoal-translation`](https://github.com/locomotivemtl/charcoal-translation)\r\n\t+\r\n- [`locomotivemtl/charcoal-view`](https://github.com/locomotivemtl/charcoal-view) 0.1+\r\n\t+ The base `UiItem` can be are `Viewable`, meaning they can be rendered with a `View`.\r\n\r\n# Example Usage\r\n\r\n## Form\r\n\r\n```php\r\n\r\n$metadata = new \\Charcoal\\Config\\GenericMetadata([\r\n\t'properties' => [\r\n\t\t'first_name' => [\r\n\t\t\t'type' => 'string'\r\n\t\t],\r\n\t\t'last_name' => [\r\n\t\t\t'type' => 'string'\r\n\t\t],\r\n\t\t'email' => [\r\n\t\t\t'type' => 'email'\r\n\t\t]\r\n\t]\r\n]);\r\n\r\n$formData = [\r\n\t'first_name' => 'Mathieu',\r\n\t'last_name' => 'Ducharme',\r\n\t'email' => 'mat@locomotive.ca'\r\n];\r\n\r\n$formConfig = [\r\n\t'type' \t\t\t\t\t\t=> 'charcoal/ui/form/generic'\r\n\t'template_ident'\t=> 'foo/bar/form',\r\n\t'template_data'\t\t=> [],\r\n\t'label'\t\t\t\t\t\t=> 'Example Form',\r\n\t'groups'\t\t\t\t\t=> [\r\n\t\t'info' => [\r\n\t\t\t'layout' =>[\r\n\t\t\t\t'structure' => [\r\n\t\t\t\t\t'columns' => [\r\n\t\t\t\t\t\t[1,1],\r\n\t\t\t\t\t\t[1]\r\n\t\t\t\t\t]\r\n\t\t\t\t]\r\n\t\t\t],\r\n\t\t\t'properties' => [\r\n\t\t\t\t'first_name',\r\n\t\t\t\t'last_name',\r\n\t\t\t\t'email'\r\n\t\t\t]\r\n\t\t]\r\n\t]\r\n];\r\n\r\n$formBuilder = new \\Charcoal\\Ui\\Form\\FormBuilder([\r\n\t'form_factory' => new \\Charcoal\\Ui\\Form\\FormFactory(),\r\n\t'view' => $container['view']\r\n]);\r\n\r\n$form = $formBuilder->buid($formConfig);\r\n$form->setMetadata($metadata);\r\n$form->setFormData($formData);\r\n\r\necho $form->render();\r\n```\r\n\r\n# Base UI Item\r\n\r\nAll UI classes implements the same basic class: `\\Charcoal\\Ui\\UiItemInterface`. This interface defines\r\n\r\n## Base UI Item config\r\n\r\n- `type`\r\n- `title`\r\n- `subtitle`\r\n- `description`\r\n- `notes`\r\n- `template_ident`\r\n\t+ The default view template.\r\n\r\n## View Integration\r\n\r\nThe `UiItemInterface` is a _Viewable_ item; that means it also implements the `\\Charcoal\\View\\ViewableInterface`. The `AbstractUiItem` fully implements this interface by using `\\Charcoal\\View\\ViewableTrait`.\r\n\r\n_Viewable_ objects can set a _View_ object with `setView($view)` have a `template_ident` (which can be set with `setTemplateIdent($id)`). See the [charcoal-view](https://github.com/locomotivemtl/charcoal-view) module for details.\r\n\r\nThe easiest way to use a View is by setting a `ViewInterface` object as `view` service on a DI container / Service Provider.\r\n\r\n# Dashboard\r\n\r\nDashboards define a _layout_ of _widgets_.\r\n\r\n - `layout` is a `LayoutInterface` object that can be created with a `LayoutBuilder`.\r\n - `widgets` is a collection of any `UiItemInterface` objects.\r\n\r\n## Dashboard config\r\n\r\n- `type` _string_\r\n- `layout` _array_\r\n- `widgets` _array_\r\n\r\n## Dashboard dependencies\r\n\r\n- `logger`\r\n- `view`\r\n- `widget_factory`\r\n\r\n## Dashboard API\r\n\r\n- `setLayout()`\r\n- `layout()`\r\n- `setWidgets(array $)`\r\n- `widgets()`\r\n- `addWidget()`\r\n- `numWidgets()`\r\n- `hasWidget()`\r\n\r\n# Layout\r\n\r\nLayouts define a grid (column-based) structure.\r\n\r\n## Layout config\r\n\r\n- `structure`\r\n\t- `columns`\r\n\r\n## Layout API\r\n\r\n- `setStructure(array $layouts)`\r\n- `structure()`\r\n- `numRows()`\r\n- `rowIndex($position = null)`\r\n- `rowData($position = null)`\r\n- `rowNumColumns($position = null)`\r\n- `rowNumCells($position = null)`\r\n- `rowFirstCellIndex($position = null)`\r\n- `cellRowIndex($position = null)`\r\n- `numCellsTotal()`\r\n- `cellSpan($position = null)`\r\n- `cellSpanBy12($position = null)`\r\n- `cellStartsRow($position = null)`\r\n- `cellEndsRow($position = null)`\r\n- `start()`\r\n- `end()`\r\n\r\n## Layout Aware objects\r\n\r\nIn the `charcoal-ui` module, 3 base objects use a layout: _dashboards_, _forms_ and _form groups_.\r\n\r\nThose classes implement the Layout requirement by implementing the `\\Charcoal\\Ui\\Layout\\LayoutAwareInterface` with the use of its corresponding `LayoutAwareTrait`.\r\n\r\n# Form\r\n\r\nForms define a layout of form groups, form options, data and metadata.\r\n\r\n- Forms have [_groups_](#form-group), which have [_inputs_](#form-input).\r\n- Groups can be layouted with a `layout` object.\r\n- Form can be pre-populated with _form data_.\r\n- _Metadata_ ca\r\n\r\n## Form config\r\n\r\n- `type`\r\n- `action`\r\n\t+ Where the form will be sent upon submission (URL).\r\n- `method`\r\n\t+ The http method to submit the form: \"post\" (default) or \"get\".\r\n- `layout`\r\n- `groups`\r\n- `form_data`\r\n- `metadata`\r\n\r\n## Form dependencies\r\n\r\n- `view`\r\n- `group_factory`\r\n\r\n## Form API\r\n\r\n- `setAction($action)`\r\n- `action()`\r\n- `setMethod($method)`\r\n- `method()`\r\n- `setGroups(array $groups)`\r\n- `groups()`\r\n- `addGroup($groupIdent, $groupData)`\r\n- `numGroups()`\r\n- `hasGroups()`\r\n- `setFormData(array $formData)`\r\n- `formData()`\r\n- `addFormData()`\r\n\r\n# Form Group\r\n\r\n## Form group config\r\n\r\n- `form`\r\n- `template_ident`\r\n- `template_controller`\r\n- `priority`\r\n- `layout`\r\n- `properties`\r\n\r\n## Form group API\r\n\r\n- `setForm($form)`\r\n- `setInputs(array $groups)`\r\n- `inputs()`\r\n- `addInput($inputIdent, $inputData)`\r\n- `numInputs()`\r\n- `hasInputs()`\r\n\r\n# Form Input\r\n\r\n- `form`\r\n- `label`\r\n- `property_ident`\r\n- `template_ident`\r\n- `template_data`\r\n- `read_only`\r\n- `required`\r\n- `disabled`\r\n- `multiple`\r\n- `input_id`\r\n- `input_name`\r\n\r\n# Menu\r\n\r\n# Menu Item\r\n\r\nMenu items define a menu level (ident, label and url) and its children (array of Menu Item).\r\n\r\n## Menu item config\r\n\r\n- `ident`\r\n- `icon_ident`\r\n- `label`\r\n- `url`\r\n- `children`\r\n\r\n## Menu item API\r\n\r\n- `setIdent($ident)`\r\n- `ident()`\r\n- `setLabel($label)`\r\n- `label()`\r\n- `setUrl($url)`\r\n- `url()`\r\n- `setChildren($children)`\r\n- `children()`\r\n- `numChildren()`\r\n- `hasChildren()`\r\n\r\n# Creational Helpers\r\n\r\nMost UI elements are very dynamic. The types of object to create is often read from a string in a configuration object. Therefore, factories are the preferred way of instanciating new UI items.\r\n\r\nUi items have also many inter-connected dependencies. Builders should therefore be used for object creation / instanciation. They use a factory internally, and have a `build($opts)` methods that allow to retrieve class name from a dynamic source, do initialization, dpendencies management and more. Builders require `Pimple` for a DI container.\r\n\r\n## Factories\r\n\r\n- `\\Charcoal\\Ui\\Dashboard\\DashboardFactory`\r\n- `\\Charcoal\\Ui\\Layout\\LayoutFactory`\r\n- `\\Charcoal\\Ui\\Form\\FormFactory`\r\n- `\\Charcoal\\Ui\\FormGroup\\FormGroupFactory`\r\n- `\\Charcoal\\Ui\\FormInput\\FormInputFactory`\r\n- `\\Charcoal\\Ui\\Menu\\MenuFactory`\r\n- `\\Charcoal\\Ui\\MenuItem\\MenuItemFactory`\r\n\r\n## Builders\r\n\r\n- `\\Charcoal\\Ui\\Dashboard\\DashboardBuilder`\r\n- `\\Charcoal\\Ui\\Layout\\LayoutBuilder`\r\n- `\\Charcoal\\Ui\\Form\\FormBuilder`\r\n- `\\Charcoal\\Ui\\FormGroup\\FormGroupBuilder`\r\n- `\\Charcoal\\Ui\\FormInput\\FormInputBuilder`\r\n- `\\Charcoal\\Ui\\Menu\\MenuBuilder`\r\n- `\\Charcoal\\Ui\\MenuItem\\MenuItemBuilder`\r\n\r\n\r\n# Service Providers\r\n\r\nService providers are provided in the `Charcoal\\Ui\\ServiceProvider` namespace for for convenience. They are the recommended way of using `charcoal-ui`, as they register all the creational utilities to a container, taking care of dependencies.\r\n\r\n- `\\Charcoal\\Ui\\ServiceProvider\\DashboardServiceProvider`\r\n\t+ `dashboard/factory`\r\n\t+ `dashboard/builder`\r\n- `\\Charcoal\\Ui\\ServiceProvider\\FormServiceProvider`\r\n\t+ `form/factory`\r\n\t+ `form/builder`\r\n\t+ `form/group/factory`\r\n\t+ `form/group/builder`\r\n\t+ `form/input/factory`\r\n\t+ `form/input/builder`\r\n- `\\Charcoal\\Ui\\ServiceProvider\\LayoutServiceProvider`\r\n\t+ `layout/factory`\r\n\t+ `layout/builder`\r\n- `\\Charcoal\\Ui\\ServiceProvider\\MenuServiceProvider`\r\n\t+ `menu/factory`\r\n\t+ `menu/builder`\r\n\t+ `menu/item/factory`\r\n\t+ `menu/item/builder`\r\n- `\\Charcoal\\Ui\\ServiceProvider\\UiServiceProvider`\r\n\t+ Register all the other service providers (dashboard, form, layout and menu).\r\n\r\n## Required services\r\n\r\nThere are a few dependencies on external services, that should be set on the same DI container as the one passed to the service providers:\r\n\r\n- `logger`, a PSR-3 logger instance.\r\n\t+ Typically a `monolog` instance from `charcoal-app`.\r\n- `view`, a `\\Charcoal\\View\\ViewInterface` instance.\r\n\t+ Typically provided with `\\Charcoal\\App\\Provider\\ViewServiceProvider`.\r\n\r\n# Development\r\n\r\n## Development dependencies\r\n\r\n- `npm`\r\n- `grunt` (install with `npm install grunt-cli`)\r\n- `composer`\r\n- `phpunit`\r\n\r\n## Coding Style\r\n\r\nThe Charcoal-UI module follows the Charcoal coding-style:\r\n\r\n- [_PSR-1_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md)\r\n- [_PSR-2_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)\r\n- [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), autoloading is therefore provided by _Composer_\r\n- [_phpDocumentor_](http://phpdoc.org/)\r\n\t- Add DocBlocks for all classes, methods, and functions;\r\n\t- For type-hinting, use `boolean` (instead of `bool`), `integer` (instead of `int`), `float` (instead of `double` or `real`);\r\n\t- Omit the `@return` tag if the method does not return anything.\r\n- Naming conventions\r\n\t- Read the [phpcs.xml](phpcs.xml) file for all the details.\r\n\r\n> Coding style validation / enforcement can be performed with `grunt phpcs`. An auto-fixer is also available with `grunt phpcbf`.\r\n\r\n## Authors\r\n\r\n- Mathieu Ducharme <mat@locomotive.ca>\r\n\r\n## Changelog\r\n\r\n### Unreleased\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}